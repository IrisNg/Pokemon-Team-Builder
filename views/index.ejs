<% include ./partials/header %>

<div class="ui container">
   <div class="ui stackable two column grid">
      <!-- Creating chosen pokemon team members -->
      <% for(var i=0; i<6; i++){ %>
      <div class="ui column team">
         <div class="ui segment">
            <div class="ui grid team-member">
               <div class="member-card center aligned five wide column">
                  <div class="ui card chosen">
                     <div class="image">
                        <img src="https://pm1.narvii.com/6508/dbd421799e1fc9118c02766e5c13836c87db6070_hq.jpg" />
                     </div>
                     <div class="description"></div>
                  </div>
               </div>
               <div class="member-details eleven wide column">
                  <div class="ui grid details">
                     <div class="main two column row">
                        <div class="column"><div class="type-one"></div></div>
                        <div class="column"><div class="type-two"></div></div>
                     </div>
                     <div class="effect row"><h5 class="header super-effective"></h5><hr></div>
                     <div class="two column row">
                        <div class="column"><p class="super-effective-one"></p></div>
                        <div class="column"><p class="super-effective-two"></p></div>  
                     </div>
                     <div class="effect row"><h5 class="header not-effective"></h5><hr></div>
                     <div class="two column row">
                        <div class="column"><p class="not-effective-one"></p></div>
                        <div class="column"><p class="not-effective-two"></p></div>
                     </div>
                     <div class="effect row"><h5 class="header no-effect"></h5><hr></div>
                     <div class="two column row">
                        <div class="column"><p class="no-effect-one"></p></div>
                        <div class="column"><p class="no-effect-two"></p></div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>
      <% } %>
   </div>
   <!-- Analysis Table -->
   <table class="ui very basic table">
      <thead>
         <tr class="table-header">
         </tr>
      </thead>
      <tbody class="table-body">
        
      </tbody>
   </table>
   <div class="ui eight column doubling centered grid thumbnails">
      <!-- Creating ALL pokemon thumbnails -->
      <% pokedex.forEach( pokemon => { %>
      <div class="center aligned column">
         <div class="ui card thumbnail">
            <div class="image"><img src="<%= pokemon.image %>" /></div>
            <div class="description">
               <strong>#</strong><span><%= pokemon.id %></span>
               <div class="pokemon-name"><%= pokemon.name %></div>
            </div>
         </div>
      </div>
      <% }) %>
   </div>
</div>

<script type="text/javascript">
   //Converting ejs variable to js variable
   var pokedex = <%- JSON.stringify(pokedex) %>;
   var types = <%- JSON.stringify(types) %>;
   var protoTable = <%- JSON.stringify(table) %>;
   //delete unnecessary keys from mongoDB
   delete protoTable._id;
   delete protoTable.__v;
   //Empty array that will contain the IDs of the pokemons picked by the user (max 6)
   var selectedPokemons = [];
   //Empty array that will contain the entries of the pokemons picked by the user
   var team;
   //Empty array that will contain the collective types of the pokemons picked by the user
   var teamTypes;
   //Empty array that will contain the entries of the pokemons' types
   var teamTypesEntries;
   //To create an instance of the protoTable object later (AKA deep copy method on the web, not reference)
   var table;
   //To calculate the minimum number of rows that needs to be created for the Analysis Table 
   var minRows;
   

   function conversionsAndCalculations() {
      //Empty out previous arrays
      team=[];
      teamTypes=[];
      teamTypesEntries=[];

      //Turn the array of IDs (selectedPokemons) to an array of selected Pokemons' entries (team)
      team = selectedPokemons.map(selected => {
         //Finding the pokemon entry from the pokedex based on the Id in the selectedPokemon array
         //Because the Id in the selectedPokemon array is a string, it has to be parsed into Number
         return pokedex.find(pokemon => pokemon.id === parseInt(selected, 10));
      });

      //Making a collective array of all selected pokemons' types
      teamTypes = team.map( pokemon => {
         if (!pokemon){
            return null
         }
         return {
            type1: pokemon.types.type1.toUpperCase(),
            type2: pokemon.types.type2 ? pokemon.types.type2.toUpperCase() : null
         }
      });
      //Turning this collective array of selected pokemons' types into full entries
      teamTypesEntries = teamTypes.map( pokemon => {
         if(!pokemon){
            return null
         }
         return {
            type1: types.find( type => {
               return type.name === pokemon.type1;
            }),
            type2: types.find( type => {
               return type.name === pokemon.type2;
            })
         }
      });      
            
      analysisTable();
   }

   //Make the selected pokemons show up as thumbnails
   function addMember(){
      for (var i = 0; i < 6; i++) {
         //Per team member's thumbnail
         if (selectedPokemons[i]) {
            //Add description and closing icon
            $(`.chosen:eq(${i}) .description`).html(`<strong>#${team[i].id}</strong> ${team[i].name}`);
            $(`.chosen:eq(${i}) .description`).append("<i class='close icon'></i>");
            //Add pokemon image
            $(`.chosen:eq(${i}) img`).attr('src', team[i].image);
            //Add eventListener to each existing closing icon that will remove said team member when clicked
            $(`.chosen:eq(${i}) .close.icon`).click(removeMember.bind(null, i));

            //Adding type icons
            $(`.type-one:eq(${i})`).text(teamTypesEntries[i].type1.name);
            if(teamTypes[i].type2){
               $(`.type-two:eq(${i})`).text(teamTypesEntries[i].type2.name);
            }
            //Adding super-effective icons
            $(`.super-effective:eq(${i})`).text("super-effective against");
            $(`.super-effective-one:eq(${i})`).text(teamTypesEntries[i].type1.superEffective.join(" "));
            //Adding Not-very-effective icons
            $(`.not-effective:eq(${i})`).text("not-very-effective against");
            $(`.not-effective-one:eq(${i})`).text(teamTypesEntries[i].type1.notEffective.join(" "));
            //Adding No-effect icons
            $(`.no-effect:eq(${i})`).text("no-effect against");
            $(`.no-effect-one:eq(${i})`).text(teamTypesEntries[i].type1.noEffect.join(" "));
            //Same for type 2, if it exists
            if(teamTypes[i].type2){
               $(`.super-effective-two:eq(${i})`).text(teamTypesEntries[i].type2.superEffective.join(" "));
               $(`.not-effective-two:eq(${i})`).text(teamTypesEntries[i].type2.notEffective.join(" "));
               $(`.no-effect-two:eq(${i})`).text(teamTypesEntries[i].type2.noEffect.join(" "));
            }
            //Additional styling
            $(`.team:eq(${i}) .segment`).css({backgroundColor: teamTypesEntries[i].type1.color, border: 'none'});
            $(`.chosen:eq(${i})`).css('border', 'none');
            if(teamTypes[i].type2){
               $(`.type-two:eq(${i})`).addClass("type-icon");
               $(`.type-two:eq(${i})`).css('color', teamTypesEntries[i].type2.color);
               $(`.team:eq(${i}) .segment`).css({backgroundImage: `linear-gradient(to bottom right, ${teamTypesEntries[i].type1.color},${teamTypesEntries[i].type2.color})`, border: 'none'});
            }
            $(`.type-one:eq(${i})`).addClass("type-icon");
            $(`.type-one:eq(${i})`).css('color', teamTypesEntries[i].type1.color);

         }
      }
      
   }

   //Callback attached to closing icon's event listener that will remove selected pokemon from team
   function removeMember(index) {
      //Remove this pokemon from the selectedPokemons array according to the index passed in
      //Retain the indexes of other remaining team members using null
      selectedPokemons[index] = null;
      //Update the team's pokemon entries to reflect this removal
      conversionsAndCalculations();
      //Remove this team pokemon's closing icon and its eventListener
      $(`.chosen:eq(${index}) .description .close.icon`).remove();
      //Remove this team pokemon's name
      $(`.chosen:eq(${index}) .description`).html('');
      //Change back this team pokemon's image to the default
      $(`.chosen:eq(${index}) img`).attr(
         'src',
         'https://pm1.narvii.com/6508/dbd421799e1fc9118c02766e5c13836c87db6070_hq.jpg'
      );

      //Remove added styling
      $(`.ui.grid.team-member:eq(${index}) .details`).find(".type-one,.type-two,h5,p").text("");
      $(`.team:eq(${index}) .ui.segment`).css({background: 'none', backgroundColor: 'white', border: '1px solid rgba(34, 36, 38, 0.15)'});
      $(`.chosen:eq(${index})`).css('border', '2px solid black');
      $(`.type-one:eq(${index})`).removeClass("type-icon");
      $(`.type-two:eq(${index})`).removeClass("type-icon");
   }

   //Function that manages the Analysis Table
   function analysisTable() {

      //Start from fresh table always (using deep copy method to avoid referencing)
      table = JSON.parse(JSON.stringify(protoTable));

      //Remove previous existing rows and header
      $(".table-row").remove();
      $("th").remove();
      
      //Only do the necessary calculations and display the Analysis Table when there is more than one pokemon
      if( selectedPokemons.length > 0 ){
         function addNameToTableType(effect){
            //Add the pokemon's name to the type that it does super-effective/not-very-effective/no-effect damage to 
            teamTypesEntries[i].type1[effect].forEach( toType => {
               table[toType.toLowerCase()][effect].push(team[i].name);
            });
            //Add the pokemon's name to the type that it does super-effective/not-very-effective/no-effect damage to based on the pokemon's 2nd type
            if(teamTypes[i].type2){
               teamTypesEntries[i].type2[effect].forEach( toType => {
                  table[toType.toLowerCase()][effect].push(team[i].name);
               });
            }
         }
         // Analysis Table - Creating object
         for (var i = 0; i < 6; i++) {
            //Do this for each pokemon that has been selected
            if (selectedPokemons[i]) {
               console.log(teamTypesEntries[i]);
               //Add the pokemon's name to the table type that it does super-effective damage to
               addNameToTableType("superEffective");
               //Add the pokemon's name to the table type that it does not-very-effective damage to
               addNameToTableType("notEffective");
               //Add the pokemon's name to the table type that it does no-effect damage to
               addNameToTableType("noEffect");
            }
         }
         //Analysis Table - calculate the minimum number of rows that needs to be created for the Analysis Table
         //An array containing the number of table rows needed by each type
         var rowsPerType =[];
         //Calculating the total number of pokemons linked to each type -> number of rows needed for each type
         for (type in table){
            var currentType = table[type];
            currentType.total = currentType.superEffective.length + currentType.notEffective.length + currentType.noEffect.length;
            rowsPerType.push(currentType.total);
         }
         //Finding the minimum number of rows
         minRows = rowsPerType.reduce((min, current) => {
            return Math.max(min, current);
         });
         console.log(minRows);
         console.log(table);
      
         //Adding Analysis Table to the DOM
         //for/in loop (new thing) to add table header
         for (type in table){ 
            $(".table-header").append(`<th>${table[type]["typeName"]}</th>`);
         } 
         //Creating minimum number of analysis table's rows
         for(var r=1; r <= minRows; r++ ){
            $(".table-body").append("<tr class='table-row'></tr>");
         }
         //Adding pokemon names to the analysis table
         for (tableType in table){
            var SE = table[tableType]["superEffective"];
            var NVE = table[tableType]["notEffective"];
            var NE = table[tableType]["noEffect"];
            for (var s = 0; s < SE.length; s++){
               $(`.table-row:eq(${s})`).append(`<td class='td-super-effective'>${SE[s]}</td>`);
            }
            for (var nve = SE.length; nve < (SE.length+NVE.length); nve++){
               $(`.table-row:eq(${nve})`).append(`<td class='td-not-effective'>${NVE[nve-SE.length]}</td>`);
            }
            for (var ne = (SE.length + NVE.length); ne < (SE.length+NVE.length+NE.length); ne++){
               $(`.table-row:eq(${ne})`).append(`<td class='td-no-effect'>${NE[ne-SE.length-NVE.length]}</td>`);
            }
         }
      }
   }

   //Adding eventlisteners to each pokemon thumbnail so that we know which pokemon gets picked by user
   $('.thumbnail').click(function() {
      //Checking for empty slot in the existing array
      var emptySlot = selectedPokemons.indexOf(null);
      //If no vacated slot then add to new one
      if (emptySlot === -1 && selectedPokemons.length < 6) {
         //Overwriting the context of "this"
         //Id of the chosen pokemon will be added to the selectedPokemon array if it is not full
         selectedPokemons.push($('span', this).text());
      }
      //Slot in the newly selected pokemon's id into the existing array if there is an empty spot
      if (emptySlot > -1) {
         selectedPokemons[emptySlot] = $('span', this).text();
      }
      //Turn the array of IDs to an array of selected Pokemons' entries
      conversionsAndCalculations();
      //Make the selected pokemons show up as thumbnails
      addMember();
   });
</script>

<% include ./partials/footer %>
